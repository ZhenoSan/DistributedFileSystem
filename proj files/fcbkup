import socket, threading, os, selectors#,atexit
from pathlib import Path
from tkinter import *
import queue # thread-safe

Q = queue.Queue()
sel = selectors.DefaultSelector()

serv_fd = None
#START_PORT = 8888
START_PORT = 7777
MAX_MSG = 4096


class CleanExit:
  pass

class TextEditor:
	#@staticmethod
	def quit_app(self, event=None):
		os.remove(self.fname)
		self.root.destroy()


	def save_file(self, event=None):
		fil_path = self.fname
		content = self.text_area.get('1.0', END + '-1c')
		self.fd.sendall(('updt '+fil_path+';'+content+'Āā').encode())
		self.quit_app(self)


	def __init__(self, root, fname,fd):
		self.fname = fname
		self.root = root
		self.fd = fd
		self.text_to_write = ""
		root.title("Text Editor")
		root.geometry("600x550")
		frame = Frame(root, width=600, height=550)
		scrollbar = Scrollbar(frame)
		self.text_area = Text(frame, width=600, height=550,
				        yscrollcommand=scrollbar.set,
				        padx=10, pady=10)
		scrollbar.config(command=self.text_area.yview)
		scrollbar.pack(side="right", fill="y")
		self.text_area.pack(side="left", fill="both", expand=True)
		frame.pack()
		the_menu = Menu(root)
		file_menu = Menu(the_menu, tearoff=0)
		file_menu.add_command(label="Save", command=self.save_file)
		file_menu.add_separator()
		file_menu.add_command(label="Quit (Unsaved)", command=self.quit_app)
		the_menu.add_cascade(label="Option", menu=file_menu)
		root.config(menu=the_menu)
		self.text_area.delete(1.0, END)
		with open(fname) as _file:
			self.text_area.insert(1.0, _file.read())
		root.update_idletasks()


def recCliMsg(fd):
	sel.register(fd, selectors.EVENT_READ)
	while True:
		print('<cmd>: ',end='',flush=True)
		events = sel.select()
		for key, mask in events:
			#print(key)
			#print(key.fd)
			#print(fd)
			if key.fd==fd.fileno():
				data = fd.recv(MAX_MSG).decode()
				if(len(data)>0):
					if(data[1:4]=='wr%'):#1 cause cmdParse sends \n
						tpath=data[3:data.find(';')]
						while(data[-2:]!='Āā'):
							data +=fd.recv(MAX_MSG).decode()
						try:
							with open(tpath, 'x') as f:
								f.write(data[data.find(';')+1:-2])
							print('File Opened')
							if(os.fork()==0):
								root = Tk()
								text_editor = TextEditor(root, tpath, fd)
								root.mainloop()
								#os.execvp('gedit',['gedit', tpath])
						except Exception as e:
							print('Update File First')
							continue
					elif(data[1:4]=='con'):
						#print('Connecting To '+data[4:])
						sel.unregister(fd)
						Q.put(7775)#data[4:])
						return
					else:
						print(data) 
				else:
					print('Connection Closed.')
					sel.close()
					Q.put('quit')
					#ipq.put(CleanExit)
					return
			elif key.fd ==0:
				cmd = input()
				if cmd == "close" or cmd == 'exit':
					sel.close()
					Q.put('quit')
					return
				elif cmd[:5] == 'updt ':
					fil_path ='%'+cmd[5:].replace('/','%')
					exp=False
					try:
						content = Path(fil_path).read_text()
						os.remove(fil_path)
					except Exception as e:
						exp = True 
						print(e)
					if(exp==True):
						continue
					fd.sendall(('updt '+fil_path+';'+content+'Āā').encode())
				else:
					fd.sendall(cmd.encode())


def main():
	print(r'''
       ,     ,_
       |`\    `;;,            ,;;'         .--.                   .---.
       |  `\    \ '.        .'.'       .---|__|           .-.     |~~~|
       |    `\   \  '-""""-' /      .--|===|--|_          |_|     |~~~|--.
       `.     `\ /          |`      |  |===|  |'\     .---!~|  .--|   |--|
         `>    /;   _     _ \       |%%|   |  |.'\    |===| |--|%%|   |  |
          /   / |       .    ;      |%%|   |  |\.'\   |   | |__|  |   |  |
         <  (`";\ ()   ~~~  (/_     |  |   |  | \  \  |===| |==|  |   |  |
          ';;\  `,     __ _.-'` )   |  |   |__|  \.'\ |   |_|__|  |~~~|__|
            >;\          `   _.'    |  |===|--|   \.'\|===|~|--|%%|~~~|--|
            `;;\          \-'       ^--^---'--^    `-'`---^-^--^--^---'--'
              ;/           \ _
Connected      |   ,"".     .` \
   To          |      _|   '   /
Peek-achu       ;    /")     .;-,
File System      \    /  __   .-'
                  \,_/-"`  `-'
	''')
	sel.register(0, selectors.EVENT_READ) #input
	global serv_fd
	message = b'cli'
	multicast_group = ('224.4.255.255', 50000)
	while(True):
		cli = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		cli.connect(('127.0.0.1', START_PORT-int(input('no:'))))
		#print('connecting to '+str(addrs))
		t1 = threading.Thread(target=recCliMsg, kwargs={'fd':cli})
		t1.daemon = True
		t1.start()
		data = Q.get()
		print(data)
		cli.close()
		t1.join()
		if(data == 'quit'):
			sys.exit()
		else:
			addrs = data

if __name__ == "__main__":
	main()

